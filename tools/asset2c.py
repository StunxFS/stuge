# (C) 2022 StunxFS. All rights reserved. Use of this source code is
# governed by an MIT license that can be found in the LICENSE file.

# Script used to embed the assets in the final binary.

import os, glob

ASSETS = glob.glob("assets/**/*.*")

for asset in ASSETS:
    if asset.endswith(".tiled-project") or asset.endswith(".tiled-session"):
        continue
    final_name = os.path.splitext(asset)[0][7:].replace(os.path.sep, "_")
    final_name_h = final_name + ".h"
    final_name_header = os.path.join("src", "data", final_name_h)
    if os.path.exists(final_name_header) and os.path.getmtime(
            final_name_header) > os.path.getmtime(asset):
        continue
    final_name_upper = final_name.upper()
    with open(asset, "rb") as f:
        bytes = f.read()
        print(
            f"[asset2c] generating header for '{asset}' (result: 'src/data/{final_name_h}')"
        )
        with open(final_name_header, "w") as fn:
            fn.write("// File generated by 'tools/asset2c.py'\n")
            fn.write(
                "// Please, do not edit this file. Your changes may be overwritten.\n\n"
            )
            fn.write(f"#ifndef STUGE_{final_name_upper}_H\n")
            fn.write(f"#define STUGE_{final_name_upper}_H\n\n")
            fn.write(f"#define {final_name_upper}_SIZE {len(bytes)}\n\n")
            fn.write(
                f"static char {final_name_upper}[{final_name_upper}_SIZE] = {{\n\t"
            )
            line_len = 0
            for i, b in enumerate(bytes):
                bstr = str(b)
                if line_len > 80:
                    fn.write("\n\t")
                    line_len = 8
                if i == len(bytes) - 1:
                    fn.write(f"{b}\n")
                    line_len += len(bstr)
                else:
                    fn.write(f"{b}, ")
                    line_len += len(bstr) + 2
            fn.write("};\n\n")
            fn.write(f"#endif // STUGE_{final_name_upper}_H\n")
